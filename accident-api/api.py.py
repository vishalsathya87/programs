# -*- coding: utf-8 -*-
"""api.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n9T8w2XtOnKq5XWkWWpatQo8y2YO_pq2
"""

pip install flask

# app_local.py
from flask import Flask, request, jsonify
import joblib
import pandas as pd
import os

app = Flask(__name__)

# Load model
try:
    model = joblib.load('best_accident_prediction_model.pkl')
    print("Model loaded successfully")
except Exception as e:
    print(f"Error loading model: {str(e)}")
    model = None

@app.route('/predict', methods=['POST'])
def predict():
    if not model:
        return jsonify({'error': 'Model not loaded'}), 500

    try:
        data = request.json
        input_df = pd.DataFrame([data])
        prediction = model.predict(input_df)[0]

        return jsonify({
            'prediction': float(prediction),
            'risk_level': 'High' if prediction > 0.7 else 'Medium' if prediction > 0.4 else 'Low'
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 400

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

import os
print("Current directory:", os.getcwd())
print("Files in directory:", os.listdir())

!pip install -U scikit-learn joblib
!ls /content  # Verify your .pkl file is listed

!pip install pyngrok
!ngrok authtoken YOUR_AUTH_TOKEN  # Replace with your free token from https://dashboard.ngrok.com/get-started/your-authtoken

print(f"Token length: {len(NGROK_AUTH_TOKEN)} characters")
# Should be 32+ characters like "2UzZxxxxxxxxxxxxxxxxxxxxxx"

!ngrok authtoken {NGROK_AUTH_TOKEN}

from google.colab.output import eval_js
print("Try this URL instead:", eval_js("google.colab.kernel.proxyPort(5000)"))

# accident_prediction_colab.ipynb
!pip install flask joblib pandas scikit-learn

from flask import Flask, request, jsonify
import joblib
import pandas as pd
import os
from google.colab import files
from google.colab.output import eval_js

# Initialize Flask app
app = Flask(__name__)

# ========== MODEL LOADING ========== #
def load_model():
    """Simplified model loading for Colab"""
    try:
        # Check if file exists
        if not os.path.exists('best_accident_prediction_model.pkl'):
            print("Please upload your model file:")
            files.upload()  # This will prompt file upload

        # Load model
        model = joblib.load('best_accident_prediction_model.pkl')
        print("Model loaded successfully!")
        return model

    except Exception as e:
        print(f"Error loading model: {str(e)}")
        print("\nTROUBLESHOOTING:")
        print("1. Click the folder icon on the left")
        print("2. Click 'Upload' and select your .pkl file")
        print("3. Run this cell again")
        return None

model = load_model()

# ========== FLASK ROUTES ========== #
@app.route('/')
def home():
    return """
    <h1>Accident Prediction API</h1>
    <p>Send POST requests to /predict with:</p>
    <pre>
    {
        "population_density": number,
        "road_condition": number (1-10),
        "vehicle_count": number,
        "weather_index": number (1-10)
    }
    </pre>
    """

@app.route('/predict', methods=['POST'])
def predict():
    if not model:
        return jsonify({'error': 'Model not loaded'}), 500

    try:
        data = request.json
        input_df = pd.DataFrame([{
            'population_density': float(data['population_density']),
            'road_condition': float(data['road_condition']),
            'vehicle_count': float(data['vehicle_count']),
            'weather_index': float(data['weather_index'])
        }])

        prediction = model.predict(input_df)[0]
        return jsonify({
            'prediction': float(prediction),
            'risk_level': 'High' if prediction > 0.7 else 'Medium' if prediction > 0.4 else 'Low'
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 400

# ========== RUN IN COLAB ========== #
if __name__ == '__main__':
    # Start Flask in a thread
    from threading import Thread
    Thread(target=app.run, kwargs={'host':'0.0.0.0','port':5000}).start()

    # Get Colab proxy URL
    public_url = eval_js("google.colab.kernel.proxyPort(5000)")
    print(f"\n=== SERVER RUNNING ===")
    print(f"Access your API at: {public_url}")
    print("\nTest with this curl command:")
    print(f"""
    curl -X POST {public_url}/predict \\
    -H "Content-Type: application/json" \\
    -d '{{"population_density":2500,"road_condition":7,"vehicle_count":500,"weather_index":4}}'
    """)

!curl -X POST  https://5000-m-s-5qrv5927w1cy-b.us-east1-0.prod.colab.dev \ \
-H "Content-Type: application/json" \
-d '{"population_density":2500,"road_condition":7,"vehicle_count":500,"weather_index":4}'